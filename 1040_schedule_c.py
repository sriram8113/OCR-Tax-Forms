# -*- coding: utf-8 -*-
"""1040_schedule_c.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-Hcwf_QsDQf-hx0gKjNBhm-WLfc6A7dA
"""

!sudo apt-get install tesseract-ocr

!pip install pdf2image pytesseract

!pip install pytesseract

!apt-get install poppler-utils

import re
from pdf2image import convert_from_path
import pytesseract


def _extract_text_from_pdf(pdf_path):
      pages = convert_from_path(pdf_path)
      extracted_text = ""
      for page in pages:
          # Perform OCR on the page image
          text = pytesseract.image_to_string(page)

          # Append extracted text to the result
          extracted_text += text

          new_text = extracted_text[:]

      return new_text

extracted_text_1040_C = _extract_text_from_pdf("/content/drive/MyDrive/form_1040_sched_C_example.pdf")
extracted_text_1040_C

def extract_text_details(text):
    details = {}

    markers = [
        ("Name of proprietor", "Name_of_proprietor"),
        ("A Principal business or profession", "principal_business"),
        ("Business name. If no separate business name, leave blank.", "Business_name"),
    ]

    for marker, key in markers:
        value_start_index = text.find(marker)
        value_end_index = text.find("\n\n", value_start_index)
        details[key] = text[value_start_index+len(marker):value_end_index].strip()


    # List of tuples containing (start marker, key, is_next_line, is_city)
    markers1 = [
        ("E Business address (including suite or room no.)", "business_address", False),
        ("City, town or post office, state, and ZIP code", "city", False),
    ]

    for marker, key, is_city in markers1:
        start_marker = marker
        start_index = text.find(start_marker) + len(start_marker)
        if is_city:  # Special handling for city to stop at comma
            end_index = text.find(",", start_index)
        else:
            end_index = text.find("\n", start_index)
        details[key] = text[start_index:end_index].strip()

    return details

extract_text_details(extracted_text_1040_C)

import re

def extract_digit_details(text):
    details = {}

    # Define patterns to extract and store values
    patterns = {
        "Form W-2": "Gross_receipts_or_sales",
        "Returns and allowances": "Returns_and_allowances",
        "Cost of goods sold": "Cost_of_goods_sold",
        "Gross profit": "Gross_profit",
        "Toe income": "Gross_Income",
        "Insurance":"Insurance",
        "Total expenses":"Total_expenses",
        "Estates and trusts":"Net_Profit",
        "Othercosts":"Other_costs",
        "Inventory atendofyear":"Inventory_at_end_of_year",

    }

    for pattern, key in patterns.items():
        # First, capture the text following the pattern
        regex_pattern = r'{}\b(.*?)$'.format(re.escape(pattern))
        match = re.search(regex_pattern, text, re.DOTALL)

        if match:
            # Extract the text chunk where the number is expected to be
            text_chunk = match.group(1)
            # Then, within this chunk, try to find the number
            # This regex targets a number, potentially avoiding those immediately after a ")"
            number_match = re.search(r'\b\d{1,3}(,\d{3})+(\.\d+)?\b', text_chunk)
            if number_match:
                value = number_match.group(0)
            else:
                value = None
        else:
            value = None

        details[key] = value


    return details

extract_digit_details(extracted_text_1040_C)

{'Name_of_proprietor': 'Clark kent',
 'principal_business': 'Superhero Services',
 'Business_name': 'Superhero Moneybags LLC',
 'business_address': '3435 TaxiLane',
 'city': 'New York,NY 10023'
 'Gross_receipts_or_sales': '50,000',
 'Returns_and_allowances': '50,000',
 'Cost_of_goods_sold': '1,000',
 'Gross_profit': '49,000',
 'Gross_Income': '49,000',
 'Insurance': '1,000',
 'Total_expenses': '1,500',
 'Net_Profit': '47,500',
 'Other_costs': '1,000',
 'Inventory_at_end_of_year': '1,000'}