# -*- coding: utf-8 -*-
"""1065_schedule_k_imp_para.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DCrRPmf-Pa8x9Wo4WGPYVN655CDVSCtY
"""

!pip install fitz

!pip install pytesseract

!pip install PyMuPDF

!pip install Pillow

!sudo apt-get install tesseract-ocr

!pip install pytesseract

!pip install PyPDF2

!apt-get install ocrmypdf -q

!pip install pdfplumber -q

import os

import requests
import pdfplumber

!pip install pdf2image pytesseract

!apt-get install poppler-utils

from pdf2image import convert_from_path
import pytesseract


def extract_text_from_pdf(pdf_path):
    # Convert PDF to list of PIL Image objects
    pages = convert_from_path(pdf_path)

    # Initialize empty string to store extracted text
    extracted_text = ""

    # Iterate through each page and perform OCR
    for page in pages:
        # Perform OCR on the page image
        text = pytesseract.image_to_string(page)

        # Append extracted text to the result
        extracted_text += text

    return extracted_text

# Example usage:
pdf_path = "/content/form_1065_sched_K1.pdf"
extracted_text = extract_text_from_pdf(pdf_path)
print(extracted_text)

extracted_text

import re

def extract_details(text):
    details = {}

    # Define patterns to extract and store values
    bottom_patterns = {
        "Partnership’s employer identification number": "Partnership’s employer identification number",
        "Partner’s SSN or TIN (Do not use TIN of a disregarded entity. See instructions.)": "Partner’s SSN or TIN",
        "Net rental real estate income (loss)": "Net rental real estate income (loss)",
        "Other net rental income (loss)": "Other net rental income (loss)",
        "Guaranteed payments for services": "Guaranteed payments for services",
        "Guaranteed payments for capital": "Guaranteed payments for capital",
        "Total guaranteed payments": "Total guaranteed payments",
        "Interest income": "Interest income",
        "Ordinary dividends": "Ordinary dividends",
        "Royalties": "Royalties",
        "Net short-term capital gain (loss)": "Net short-term capital gain (loss)",
        "Net long-term capital gain (loss)": "Net long-term capital gain (loss)",
        "Collectibles (28%) gain (loss)": "Collectibles (28%) gain (loss)",
        "Unrecaptured section 1250 gain": "Unrecaptured section 1250 gain",
        "Net section 1231 gain (loss)": "Net section 1231 gain (loss)",
        "Other income (loss)": "Other income (loss)",
        "Section 179 deduction": "Section 179 deduction",
        "Other deductions": "Other deductions",
    }

    side_patterns = {
        "Beginning capital account": "Partner’s Capital Account Analysis- Beginning capital account",
        "Capital contributed during the year": "Partner’s Capital Account Analysis- Capital contributed during the year",
        "Current year net income (loss)": "Partner’s Capital Account Analysis- Current year net income (loss)",
        "Other increase": "Partner’s Capital Account Analysis-Other increase",
        "Withdrawals and distributions": "Partner’s Capital Account Analysis- Withdrawals and distributions",
        "Ending capital account": "Partner’s Capital Account Analysis-Ending capital account",
    }

    last_patterns = {
        "Qualified dividends": "Qualified dividends",
        "Dividend equivalents": "Dividend equivalents",
        "Foreign taxes paid or accrued": "Foreign taxes paid or accrued",
    }

    # Search from the bottom line for the top 2 patterns
    for pattern, key in bottom_patterns.items():
        start_index = text.find(pattern)
        if start_index != -1:  # Check if pattern exists
            newline_index = text.find("\n", start_index)
            below_line = text[newline_index + 1:]
            match_below = re.search(r'\b(\d{3,}(\.\d*)?)\b', below_line)
            if match_below:
                value_below = match_below.group(1)
                details[key] = value_below
            else:
                details[key] = None

    # Search from the side
    lines = text.split('\n')
    for pattern, key in side_patterns.items():
        for line_index, line in enumerate(lines):
            if pattern in line:
                next_line = lines[line_index + 1]
                match = re.search(r'\b(\d{3,}(\.\d*)?)\b', next_line)
                if match:
                    details[key] = match.group(1)
                else:
                    details[key] = None
                break

    # Search for the last number below the line for each last_pattern
    for pattern, key in last_patterns.items():
        for line_index, line in enumerate(lines):
            if pattern in line:
                next_line = lines[line_index + 1]
                match = re.findall(r'\b(\d{3,}(\.\d*)?)\b', next_line)
                if match:
                    last_number = match[-1][0]
                    details[key] = last_number
                else:
                    details[key] = None
                break

    return details

details_2023 = extract_details(extracted_text)

extracted_info_list = list(details_2023.items())

extracted_info_list

pdf_path_22 = "/content/form_1065_sched_K1_2022.pdf"
extracted_text_2022 = extract_text_from_pdf(pdf_path_22)
print(extracted_text_2022)

details_2022 = extract_details(extracted_text_2022)

extracted_info_list_2022 = list(details_2022.items())

extracted_info_list_2022

pdf_path_21 = "/content/form_1065_sched_K1_2021.pdf"
extracted_text_2021 = extract_text_from_pdf(pdf_path_21)
print(extracted_text_2021)

details_2021 = extract_details(extracted_text_2021)

extracted_info_list_2021 = list(details_2021.items())

extracted_info_list_2021